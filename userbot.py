from telethon import TelegramClient, events
import os
import logging
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
api_id = int(os.environ.get('API_ID', 0))
api_hash = os.environ.get('API_HASH', '')
phone = os.environ.get('PHONE', '')
string_session = os.environ.get('STRING_SESSION', '')

# –ò–°–¢–û–ß–ù–ò–ö–ò - –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
source_chats_str = os.environ.get('SOURCE_CHATS', '-1002706823424')  # Appzh –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
SOURCE_CHATS = [int(chat_id.strip()) for chat_id in source_chats_str.split(',')]

# –¶–ï–õ–ï–í–ê–Ø –ì–†–£–ü–ü–ê –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
TARGET_CHAT = int(os.environ.get('TARGET_CHAT', '-1002699982539'))  # Appzh_backup

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([api_id, api_hash, phone, string_session]):
    logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient(string_session, api_id, api_hash)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –≥—Ä—É–ø–ø
chat_names = {}

@client.on(events.NewMessage(chats=SOURCE_CHATS))
async def forward_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
        chat_name = chat_names.get(event.chat_id, f"Chat {event.chat_id}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        sender = await event.get_sender()
        sender_name = getattr(sender, 'first_name', 'Unknown')
        if hasattr(sender, 'username') and sender.username:
            sender_info = f"{sender_name} (@{sender.username})"
        else:
            sender_info = sender_name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        header_text = f"üì® **–ò–∑ –≥—Ä—É–ø–ø—ã:** {chat_name}\nüë§ **–û—Ç:** {sender_info}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        await client.send_message(TARGET_CHAT, header_text)
        
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await client.forward_messages(
            entity=TARGET_CHAT,
            messages=event.message,
            from_peer=event.chat_id
        )
        
        logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ '{chat_name}' –æ—Ç {sender_name}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {e}")
        await asyncio.sleep(5)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
        await client.start(phone)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        me = await client.get_me()
        logger.info(f"UserBot –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        logger.info(f"\nüì• –ì–†–£–ü–ü–´-–ò–°–¢–û–ß–ù–ò–ö–ò ({len(SOURCE_CHATS)}):")
        for i, chat_id in enumerate(SOURCE_CHATS, 1):
            try:
                chat = await client.get_entity(chat_id)
                chat_name = getattr(chat, 'title', f'Chat {chat_id}')
                chat_names[chat_id] = chat_name
                logger.info(f"{i}. {chat_name} (ID: {chat_id})")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —á–∞—Ç—É {chat_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É
        logger.info(f"\nüì§ –¶–ï–õ–ï–í–ê–Ø –ì–†–£–ü–ü–ê:")
        try:
            target = await client.get_entity(TARGET_CHAT)
            target_name = getattr(target, 'title', 'Unknown')
            logger.info(f"‚úÖ {target_name} (ID: {TARGET_CHAT})")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ: {e}")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º
        logger.info("\nüöÄ UserBot –≥–æ—Ç–æ–≤! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("‚ûñ" * 30)
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    try:
        client.loop.run_until_complete(main())
    except KeyboardInterrupt:
        logger.info("UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
